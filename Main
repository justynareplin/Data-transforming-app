package com.scala
import scala.util.Try

object Main {

  def main(args: Array[String]): Unit =
    private def go(emit: () => Seq[RawUser]): Result =
    private def toResult(v: DomainUser): Result =
    private def transform(r: RawUser): DomainUser =

}
obejct Source{
  def emit(conf: Config)(): Seq[RawUser] =
}
trait Config
case class FileConfig() extends Config

object Config {
  def current: Config = FileConfig()
}

case class Result(successes: Int, failures: Int)
case class TransformError(error:String)

case class DomainUser(
  person:Person,
  phoneNumber: PhoneNumber
)
case class PhoneNumber(
  countryCode: Int,
  areaCode: Int,
  prefix: Int,
  lineNumber: Int) {
  override def toString = s"$countryCode ($areaCode) $prefix-$lineNumber"
)
  object PhoneNumber {
    private val pattern ="""(\d{1})-(\d{3})-(\d{3})-(\d{4})""".r
    def from(phoneString: String): PhoneNumber = ??
  }
}
case class Person(firstName:String, lastName: String)
case class RawUser(
                  fullName: String,
                  email: String,
                  phone: String,
                  streetAddress: String,
                  city: String,
                  zipCode: String) {
  lazy val person: Person =??
}
